@use 'sass:math';
@import './assets/scss/base/mixins';
@import './assets/scss/base/icons';
@import url(https://fonts.googleapis.com/css?family=Roboto:100,100italic,300,300italic,regular,italic,500,500italic,700,700italic,900,900italic&display=swap);

@font-face {
    font-family: 'icons';
    font-display: swap;
    src: url('./assets/fonts/icons.woff') format('woff');
    font-weight: 400;
    font-style: normal;
}

$fontFamily: 'Roboto';
$fontSize: rem(16); // где 14(px) - размер шрифта по умолчанию из макета

// Основные цвета
$mainColor: #232e35; // Цвет шрифта по умолчанию
$acent: #7e74f1;
$acentBag: #eae6fe;
$blackColor: #181919;
$whiteBag: #fbfbfb;
$whiteColor: #ffffff;
$bagAcent: #656d72;
// Минимальная ширина страницы
$minWidth: 320;
// Ширина полотна (макета)
$maxWidth: 1440;
// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1240;
// Общий отступ у контейнера
// (30 = по 15px слева и справа, 0 = нет отступа)
$containerPadding: 30;

// Ширина срабатывания первого брейкпоинта
$containerWidth: $maxWidthContainer + $containerPadding;

// Брейк-поинты
$pc: em($containerWidth); // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$tablet: em(991.98); // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: em(767.98); // Телефоны L
$mobileSmall: em(479.98); // Телефоны S

// Тип адаптива:
// 1 = отзывчивость (у контейнера нет брейкпоинтов),
$responsiveType: 1;

// Обнуление и общие параметры ====================================================
@import './assets/scss/base/null';

// Оболочка ====================================================
.wrapper {
    min-height: 100%;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    // Прижимаем footer
    > main {
        flex: 1 1 auto;
    }
    // Фикс для слайдеров
    > * {
        min-width: 0;
    }
}

/*
(i) Стили будут применяться ко 
всем классам содержащим *__container
Например header__container, main__container и т.д.
*/
@if ($responsiveType==1) {
    // Отзывчивая
    [class*='__container'] {
        @if ($maxWidthContainer>0) {
            max-width: rem($maxWidthContainer);
            box-sizing: content-box;
            margin: 0 auto;
        }
        @if ($containerPadding>0) {
            padding: 0 rem(math.div($containerPadding, 2));
        }
    }
}

@import './assets/scss/base/button.scss';
@import './core/components/header/header.scss';
@import './core/components/footer/footer.scss';
